commit 47fe6aab0122239ac40cc3f32d2e0c618b522bfa
Author: Peter Wan <peterdanwan@gmail.com>
Date:   Fri Apr 8 20:17:54 2022 -0400

    Version 1 Release

diff --git a/Version 1/CP4P_Final_Assignment_Plan_v1.xlsx b/Version 1/CP4P_Final_Assignment_Plan_v1.xlsx
new file mode 100644
index 0000000..a0a9a6e
Binary files /dev/null and b/Version 1/CP4P_Final_Assignment_Plan_v1.xlsx differ
diff --git a/Version 1/converting.c b/Version 1/converting.c
new file mode 100644
index 0000000..6077f8d
--- /dev/null
+++ b/Version 1/converting.c	
@@ -0,0 +1,41 @@
+/*
+Origin: Peter Wan, pwan6@myseneca.ca, 182735217, April 4 2022, CPR101, Group Project
+Filename: converting.c
+Purpose: Converts Strings to Ints
+*/
+
+// CONVERTING V1
+#include "converting.h"											 // Includes: <stdio.h>, <string.h>, <stdlib.>, and the void converting(); prototype
+
+void converting() {												 // Start of Program
+/*
+
+	Purpose: Converts Strings to Ints 
+
+*/
+
+	
+/* Version 1 */
+	printf("*** Start of Converting Strings to int Demo ***\n"); // Display Start of Converting Strings module to User.
+	char int_string[80];
+	int int_number;
+	printf("Type the int numeric string (q - to quit):\n");		 // Prompts User to enter a numeric string or press q to quit.
+	gets(int_string);
+	while (strcmp(int_string, "q") != 0) {						 // Convert user's string to an int and ask them to do it again so long as they don't enter q.
+		int_number = atoi(int_string);
+		printf("Converted number is %d\n", int_number);
+		printf("Type the int numeric string (q - to quit):\n");
+		gets(int_string);
+	}															 // While-loop ends. 
+	printf("*** End of Converting Strings to int Demo ***\n\n"); // After user enters q this message will display and this program ends.
+
+}																 // End of Program
+/* Version 2 */
+//>> insert here
+
+
+/* Version 3 */
+//>> insert here
+
+
+
diff --git a/Version 1/converting.h b/Version 1/converting.h
new file mode 100644
index 0000000..3959d25
--- /dev/null
+++ b/Version 1/converting.h	
@@ -0,0 +1,9 @@
+#ifndef _CONVERTING_H
+#define _CONVERTING_H
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+void converting();
+
+#endif
\ No newline at end of file
diff --git a/Version 1/converting_test_cases.xlsx b/Version 1/converting_test_cases.xlsx
new file mode 100644
index 0000000..bc7df05
Binary files /dev/null and b/Version 1/converting_test_cases.xlsx differ
diff --git a/Version 1/converting_testing.txt b/Version 1/converting_testing.txt
new file mode 100644
index 0000000..239cb37
--- /dev/null
+++ b/Version 1/converting_testing.txt	
@@ -0,0 +1,47 @@
+*** Start of Converting Strings to int Demo ***
+Type the int numeric string (q - to quit):
+1234567890
+Converted number is 1234567890
+Type the int numeric string (q - to quit):
+987456
+Converted number is 987456
+Type the int numeric string (q - to quit):
+123
+Converted number is 123
+Type the int numeric string (q - to quit):
+8888
+Converted number is 8888
+Type the int numeric string (q - to quit):
+1234567890
+Converted number is 1234567890
+Type the int numeric string (q - to quit):
+2147483648
+Converted number is 2147483647
+Type the int numeric string (q - to quit):
+1234567890
+Converted number is 1234567890
+Type the int numeric string (q - to quit):
+-2147483649
+Converted number is -2147483648
+Type the int numeric string (q - to quit):
+2147483648
+Converted number is 2147483647
+Type the int numeric string (q - to quit):
+$a
+Converted number is 0
+Type the int numeric string (q - to quit):
+a55
+Converted number is 0
+Type the int numeric string (q - to quit):
+123
+Converted number is 123
+Type the int numeric string (q - to quit):
+99
+Converted number is 99
+Type the int numeric string (q - to quit):
+q
+*** End of Converting Strings to int Demo ***
+
+
+C:\Users\Peter\Documents\CPR101\GroupProject\ProjectSourceCode\CPR101 Group Code\x64\Debug\CPR101 Group Code.exe (process 38360) exited with code 0.
+Press any key to close this window . . .
\ No newline at end of file
diff --git a/Version 1/fundamentals.c b/Version 1/fundamentals.c
new file mode 100644
index 0000000..cab0ae7
--- /dev/null
+++ b/Version 1/fundamentals.c	
@@ -0,0 +1,53 @@
+/*
+Origin: Lathesan Vadivelu, lvadivelu@myseneca.ca, 075216143, April 4, 2022, CPR101, Group Project
+[FileName] : [fundamentals.c]
+Purpose: [Indexing Strings, Finds string location if it exists]
+*/
+
+
+#include "fundamentals.h"																	            // Includes: <stdio.h>, <stdlib.h>, <string.h> and the void fundamentals(); prototype.
+
+void fundamentals() {
+	
+/*
+Purpose: [Indexing Strings, Finds string location if it exists]
+*/
+	
+	
+	
+	
+	
+	
+	
+	
+	/* Version 1 */
+	printf("*** Start of Indexing Strings Demo ***\n");													// Displays Start of Indexing Strings Demo module to User.
+	char buffer1[80];
+	char num_input[10];
+	unsigned int position;
+	printf("Type not empty string (q - to quit):\n");													// Display: Requests user to enter a String that is not empty.
+	printf("01234567890123456789012345678901234567890123456789012345678901234567890123456789");			// Prints the number range [0-9] 8 Times without any other characters
+	gets(buffer1);																						// Ask user for a non empy string
+	while (strcmp(buffer1, "q") != 0) {
+		printf("Type the character position within the string: \n");									// Requests user to Enter a character position that is in the string
+		gets(num_input);																				// Ask user for the character position within the string that was previously displayed
+		position = atoi(num_input);
+		if (position >= strlen(buffer1)) {
+			position = strlen(buffer1) - 1;
+			printf("Too big... Position reduced to max. available\n");									// Notifies user that the character position is too large, and that the position has been changed to the max allowed value
+		}
+		printf("The character found at %d position is \'%c\'\n", position, buffer1[position]);			// Notifies the user what the position is of the character that the user requested inside of the index
+		printf("Type not empty string (q - to quit):\n");												// Tells user to enter a non-empty string to quit the program
+		printf("01234567890123456789012345678901234567890123456789012345678901234567890123456789");     // Prints the number range [0-9] 8 Times without any other characters
+		gets(buffer1);
+	}
+
+/* Version 2 */
+//>> insert here
+
+
+/* Version 3 */
+//>> insert here
+
+
+}
\ No newline at end of file
diff --git a/Version 1/fundamentals.h b/Version 1/fundamentals.h
new file mode 100644
index 0000000..04f4dae
--- /dev/null
+++ b/Version 1/fundamentals.h	
@@ -0,0 +1,9 @@
+#ifndef _FUNDAMENTALS_H
+#define _FUNDAMENTALS_H
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+void fundamentals();
+
+#endif
\ No newline at end of file
diff --git a/Version 1/fundamentals_test_cases.xlsx b/Version 1/fundamentals_test_cases.xlsx
new file mode 100644
index 0000000..3359d69
Binary files /dev/null and b/Version 1/fundamentals_test_cases.xlsx differ
diff --git a/Version 1/fundamentals_testing.txt b/Version 1/fundamentals_testing.txt
new file mode 100644
index 0000000..f9e4106
--- /dev/null
+++ b/Version 1/fundamentals_testing.txt	
@@ -0,0 +1,16 @@
+*** Start of Indexing Strings Demo ***
+Type not empty string (q - to quit):
+01234567890123456789012345678901234567890123456789012345678901234567890123456789hello
+Type the character position within the string:
+2
+The character found at 2 position is 'l'
+Type not empty string (q - to quit):
+01234567890123456789012345678901234567890123456789012345678901234567890123456789TheLazyFox
+Type the character position within the string:
+12
+Too big... Position reduced to max. available
+The character found at 9 position is 'x'
+Type not empty string (q - to quit):
+01234567890123456789012345678901234567890123456789012345678901234567890123456789
+Type the character position within the string:
+3
\ No newline at end of file
diff --git a/Version 1/main.c b/Version 1/main.c
new file mode 100644
index 0000000..da54e90
--- /dev/null
+++ b/Version 1/main.c	
@@ -0,0 +1,20 @@
+/*
+Origin: Peter Wan, pwan6@myseneca.ca, 182735217, April 4 2022, CPR101, Group Project
+Filename: main.c
+Purpose: Start of application - runs the following functions in this order: fundamentals();, manipulating();, converting();, and tokenizing();
+*/
+
+#include "fundamentals.h"	// Includes: <stdio.h>, <stdlib.h>, <string.h> and the void fundamentals(); prototype.
+#include "manipulating.h"	// Includes: <stdio.h>, <string.h>, and the void manipulating() prototype; prototype.
+#include "converting.h"		// Includes: <stdio.h>, <string.h>, <stdlib.>, and the void converting(); prototype.
+#include "tokenizing.h"		// Includes: <stdio.h>, <string.h>, and the void tokenizing(); prototype.
+
+int main() {				// Start of the main application/program.
+	
+	fundamentals();			// Calls the void fundamentals(); function.
+	manipulating();			// Calls the void manipulating(); function.
+	converting();			// Calls the void converting(); function.
+	tokenizing();			// Calls the void tokenizing(); function.
+
+	return 0;				// Main function returns 0 to exit program properly.
+}							// End of main function. 
\ No newline at end of file
diff --git a/Version 1/main_test_cases.xlsx b/Version 1/main_test_cases.xlsx
new file mode 100644
index 0000000..86179d9
Binary files /dev/null and b/Version 1/main_test_cases.xlsx differ
diff --git a/Version 1/main_testing.txt b/Version 1/main_testing.txt
new file mode 100644
index 0000000..ce7ecdc
--- /dev/null
+++ b/Version 1/main_testing.txt	
@@ -0,0 +1,114 @@
+*** Start of Indexing Strings Demo ***
+Type not empty string (q - to quit):
+01234567890123456789012345678901234567890123456789012345678901234567890123456789Hello
+Type the character position within the string:
+2
+The character found at 2 position is 'l'
+Type not empty string (q - to quit):
+01234567890123456789012345678901234567890123456789012345678901234567890123456789TheLazyFox
+Type the character position within the string:
+2
+The character found at 2 position is 'e'
+Type not empty string (q - to quit):
+01234567890123456789012345678901234567890123456789012345678901234567890123456789q
+*** Start of Concatenating Strings Demo ***
+Type the 1st string (q - to quit):
+Testing a string that is 79 characters to account for null byte 123oojaosdfa534
+Type the 2nd string:
+Testing a string that is 79 characters to account for null byte asdfasdfdfasfdf
+Concatenated string is 'Testing a string that is 79 characters to account for null byte 123oojaosdfa534Testing a string that is 79 characters to account for null byte asdfasdfdfasfdf'
+Type the 1st string (q - to quit):
+^
+Type the 2nd string:
+a
+Concatenated string is '^a'
+Type the 1st string (q - to quit):
+q
+*** End of Concatenating STrings Demo ***
+
+*** Start of Converting Strings to int Demo ***
+Type the int numeric string (q - to quit):
+1234567890
+Converted number is 1234567890
+Type the int numeric string (q - to quit):
+987456
+Converted number is 987456
+Type the int numeric string (q - to quit):
+123
+Converted number is 123
+Type the int numeric string (q - to quit):
+8888
+Converted number is 8888
+Type the int numeric string (q - to quit):
+123
+Converted number is 123
+Type the int numeric string (q - to quit):
+99
+Converted number is 99
+Type the int numeric string (q - to quit):
+q
+*** End of Converting Strings to int Demo ***
+
+*** Start of Tokenizing Words Demo ***
+Type a few words separated by space(q - to quit):
+! . $ / | \n \t = + _ -!
+Word #1 is '!'
+Word #2 is '.'
+Word #3 is '$'
+Word #4 is '/'
+Word #5 is '|'
+Word #6 is '\n'
+Word #7 is '\t'
+Word #8 is '='
+Word #9 is '+'
+Word #10 is '_'
+Word #11 is '-!'
+Type a few words separated by space (q - to quit):
+This is a test for a sentence that has more than 198 characters! This is a test for a sentence that has more than 198 characters! This is a test for a sentence that has more than 198 characters! 199!
+Word #1 is 'This'
+Word #2 is 'is'
+Word #3 is 'a'
+Word #4 is 'test'
+Word #5 is 'for'
+Word #6 is 'a'
+Word #7 is 'sentence'
+Word #8 is 'that'
+Word #9 is 'has'
+Word #10 is 'more'
+Word #11 is 'than'
+Word #12 is '198'
+Word #13 is 'characters!'
+Word #14 is 'This'
+Word #15 is 'is'
+Word #16 is 'a'
+Word #17 is 'test'
+Word #18 is 'for'
+Word #19 is 'a'
+Word #20 is 'sentence'
+Word #21 is 'that'
+Word #22 is 'has'
+Word #23 is 'more'
+Word #24 is 'than'
+Word #25 is '198'
+Word #26 is 'characters!'
+Word #27 is 'This'
+Word #28 is 'is'
+Word #29 is 'a'
+Word #30 is 'test'
+Word #31 is 'for'
+Word #32 is 'a'
+Word #33 is 'sentence'
+Word #34 is 'that'
+Word #35 is 'has'
+Word #36 is 'more'
+Word #37 is 'than'
+Word #38 is '198'
+Word #39 is 'characters!'
+Word #40 is '199!'
+Type a few words separated by space (q - to quit):
+q
+*** End of Tokenizing Words Demo ***
+
+
+C:\Users\Peter\Documents\CPR101\GroupProject\ProjectSourceCode\CPR101 Group Code\x64\Debug\CPR101 Group Code.exe (process 13912) exited with code 0.
+Press any key to close this window . . .
\ No newline at end of file
diff --git a/Version 1/manipulating.c b/Version 1/manipulating.c
new file mode 100644
index 0000000..01b8312
--- /dev/null
+++ b/Version 1/manipulating.c	
@@ -0,0 +1,37 @@
+/*
+Origin: Henly Su, hsu31@myseneca.ca, 143334183, 04/04/2022, CPR101, Group Project
+[executable filename] : [Manipulating.c]
+Purpose: [Concatenate strings]
+*/
+
+#define _CRT_SECURE_NO_WARNINGS
+#include "manipulating.h"                                       //Include: <stdio.h>, <string.h> and the void manipulating() prototype
+
+void manipulating() {
+	/*
+	Purpose: [Concatenate strings]
+	*/
+
+	/* Version 1 */
+	printf("*** Start of Concatenating Strings Demo ***\n");    //Display Start of Concatenating Strings Demo
+	char string1[200];
+	char string2[200];
+	printf("Type the 1st string (q - to quit):\n");             //Prompt user to enter a string or 'q' to quit
+	gets(string1);
+	while (strcmp(string1, "q") != 0) {                         //Concatenates strings1 and string2 until user enters 'q'
+		printf("Type the 2nd string:\n");
+		gets(string2);                                          //Prompt user to enter second string
+		strcat(string1, string2);
+		printf("Concatenated string is \'%s\'\n", string1);     //Display concatenated string
+		printf("Type the 1st string (q - to quit):\n");
+		gets(string1);
+	}
+	printf("*** End of Concatenating Strings Demo ***\n\n");    //Displays after user presses the 'q' character
+
+/* Version 2 */
+//>> insert here
+
+
+/* Version 3 */
+//>> insert here
+}
diff --git a/Version 1/manipulating.h b/Version 1/manipulating.h
new file mode 100644
index 0000000..c42dc1e
--- /dev/null
+++ b/Version 1/manipulating.h	
@@ -0,0 +1,8 @@
+#ifndef _MANIPULATING_H
+#define _MANIPULATING_H
+
+#include <stdio.h>
+#include <string.h>
+void manipulating();
+
+#endif
\ No newline at end of file
diff --git a/Version 1/manipulating_test_cases.xlsx b/Version 1/manipulating_test_cases.xlsx
new file mode 100644
index 0000000..34dc65f
Binary files /dev/null and b/Version 1/manipulating_test_cases.xlsx differ
diff --git a/Version 1/manipulating_testing.txt b/Version 1/manipulating_testing.txt
new file mode 100644
index 0000000..0865584
--- /dev/null
+++ b/Version 1/manipulating_testing.txt	
@@ -0,0 +1,31 @@
+*** Start of Concatenating Strings Demo ***
+Type the 1st string (q - to quit):
+I like
+Type the 2nd string:
+cheese
+Concatenated string is 'I like cheese'
+Type the 1st string (q - to quit):
+12345
+Type the 2nd string:
+67890
+Concatenated string is '1234567890'
+Type the 1st string (q - to quit):
+!@#$
+Type the 2nd string:
+%^&*()_+
+Concatenated string is '!@#$%^&*()_+'
+Type the 1st string (q - to quit):
+Bananananananananananananananananananananananananananananananananananananananana
+Type the 2nd string:
+Bananananananananananananananananananananananananananananananananananananananana
+Concatenated string is 'BanananananananananananananananananananananananananananananananananananananananaBananananananananananananananananananananananananananananananananananananananana'
+Type the 1st string (q - to quit):
+BanananananananananananananananananananananananananananananananananananananananaBananananananananananananananananananananananananananananananananananananananana
+Type the 2nd string:
+BanananananananananananananananananananananananananananananananananananananananaBananananananananananananananananananananananananananananananananananananananana
+/*THE PROGRAM CRASHED RIGHT HERE BECAUSE IT RAN OUT OF MEMORY*/
+
+*** Start of Concatenating Strings Demo ***
+Type the 1st string (q - to quit):
+q
+*** End of Concatenating Strings Demo ***
\ No newline at end of file
diff --git a/tokenizing.c b/Version 1/tokenizing.c
similarity index 90%
rename from tokenizing.c
rename to Version 1/tokenizing.c
index 06fa373..7bc6aa7 100644
--- a/tokenizing.c
+++ b/Version 1/tokenizing.c	
@@ -1,12 +1,11 @@
 /*
  Origin: Sebastian Rubina, srubina-sanchez@myseneca.ca, 150640217, 04/APR/2022, CPR101, Group Project
- tokenizing.c : 
- Purpose (Version 1): Separates a string into words (space separated)
- Purpose (Version 2): Separates comma delimited phrases
+ File name: tokenizing
+ Purpose: Separates a string into words (space separated)
  */
 
-#include "tokenizing.h"
 #define _CRT_SECURE_NO_WARNINGS
+#include "tokenizing.h"
 
 void tokenizing() {
 /* Version 1 */
@@ -31,6 +30,7 @@ void tokenizing() {
 /* Version 2 */
 //>> insert here
 
+
 /* Version 3 */
 //>> insert here
 
diff --git a/tokenizing.h b/Version 1/tokenizing.h
similarity index 79%
rename from tokenizing.h
rename to Version 1/tokenizing.h
index b8ec6cb..d31c8a0 100644
--- a/tokenizing.h
+++ b/Version 1/tokenizing.h	
@@ -3,7 +3,6 @@
 
 #include <stdio.h>
 #include <string.h>
-
-void tokenizing(void);
+void tokenizing();
 
 #endif
diff --git a/Version 1/tokenizing_test_cases.xlsx b/Version 1/tokenizing_test_cases.xlsx
new file mode 100644
index 0000000..d9db1ce
Binary files /dev/null and b/Version 1/tokenizing_test_cases.xlsx differ
diff --git a/Version 1/tokenizing_testing.txt b/Version 1/tokenizing_testing.txt
new file mode 100644
index 0000000..dda17d4
--- /dev/null
+++ b/Version 1/tokenizing_testing.txt	
@@ -0,0 +1,56 @@
+*** Start of Tokenizing Words Demo ***
+Type a few words separated by space(q - to quit):
+warning: this program uses gets(), which is unsafe.
+Test1Word
+Word #1 is 'Test1Word'
+Type a few words separated by space (q - to quit):
+Test 3 Words
+Word #1 is 'Test'
+Word #2 is '3'
+Word #3 is 'Words'
+Type a few words separated by space (q - to quit):
+[Numbers Test: 1, 2, 3, 4, 5]
+Word #1 is 'Numbers'
+Word #2 is 'Test:'
+Word #3 is '1,'
+Word #4 is '2,'
+Word #5 is '3,'
+Word #6 is '4,'
+Word #7 is '5'
+Type a few words separated by space (q - to quit):
+
+Type a few words separated by space (q - to quit):
+
+Type a few words separated by space (q - to quit):
+
+Type a few words separated by space (q - to quit):
+! . $ / \ \n \t = + _ - !
+Word #1 is '!'
+Word #2 is '.'
+Word #3 is '$'
+Word #4 is '/'
+Word #5 is '\'
+Word #6 is '\n'
+Word #7 is '\t'
+Word #8 is '='
+Word #9 is '+'
+Word #10 is '_'
+Word #11 is '-'
+Word #12 is '!'
+Type a few words separated by space (q - to quit):
+Test         Multiple            Spaces       Between           Words
+Word #1 is 'Test'
+Word #2 is 'Multiple'
+Word #3 is 'Spaces'
+Word #4 is 'Between'
+Word #5 is 'Words'
+Type a few words separated by space (q - to quit):
+This is a test for a sentence that has more than 200 characters! This is a test for a sentence that has more than 200 characters! This is a test for a sentence that has more than 200 characters! This is a test for a sentence that has more than 200 characters! This is a test for a sentence that has more than 200 characters! This is a test for a sentence that has more than 200 characters! This is a test for a sentence that has more than 200 characters! This is a test for a sentence that has more than 200 characters! This is a test for a sentence that has more than 200 characters! This is a test for a sentence that has more than 200 characters! This is a test for a sentence that has more than 200 characters! This is a test for a sentence that has more than 200 characters! This is a test for a sentence that has more than 200 characters! This is a test for a sentence that has more than 200 characters! This is a test for a sentence that has more than 200 characters! This is a test for a sentence that has more than 200 characters! This is a test for a sentence that has more than 200 characters! This is a test for a sentence that has more than 200 characters! This is a test for a sentence that has more than 200 characters! This is a test for a sentence that has more than 200 characters! 
+
+
+
+
+
+
+
+
\ No newline at end of file
diff --git a/test b/test
deleted file mode 100644
index 309db29..0000000
--- a/test
+++ /dev/null
@@ -1 +0,0 @@
-Hi this is just a test.
diff --git a/test.txt b/test.txt
deleted file mode 100644
index e69de29..0000000

commit b6ebcb792c08a81b57590695ec5f9730820ff7b9
Author: SebastianRubina <sebastian.rubina@icloud.com>
Date:   Fri Apr 8 20:02:21 2022 -0400

    Version 1 of tokenizing.c & tokenizing.h

diff --git a/tokenizing.c b/tokenizing.c
new file mode 100644
index 0000000..06fa373
--- /dev/null
+++ b/tokenizing.c
@@ -0,0 +1,38 @@
+/*
+ Origin: Sebastian Rubina, srubina-sanchez@myseneca.ca, 150640217, 04/APR/2022, CPR101, Group Project
+ tokenizing.c : 
+ Purpose (Version 1): Separates a string into words (space separated)
+ Purpose (Version 2): Separates comma delimited phrases
+ */
+
+#include "tokenizing.h"
+#define _CRT_SECURE_NO_WARNINGS
+
+void tokenizing() {
+/* Version 1 */
+    printf("*** Start of Tokenizing Words Demo ***\n");
+    char words[200];
+    char* word;
+    int w_counter;
+    printf("Type a few words separated by space(q - to quit):\n");
+    gets(words);                                                        // User inputs string
+    while (strcmp(words, "q") != 0) {                                   // Checks if user input q (for quit), else runs code
+        word = strtok(words, " ");                                      // Gets the first word (sets " " for delimiter)
+        w_counter = 1;                                                  // Initializes word counter
+        while (word) {
+            printf("Word #%d is \'%s\'\n", w_counter++, word);          // Prints word number and word value, increases counter
+            word = strtok(NULL, " ");                                   // Passes NULL pointer to scan for new words
+        }
+        printf("Type a few words separated by space (q - to quit):\n");
+        gets(words);
+    }
+    printf("*** End of Tokenizing Words Demo ***\n\n");
+
+/* Version 2 */
+//>> insert here
+
+/* Version 3 */
+//>> insert here
+
+
+}
diff --git a/tokenizing.h b/tokenizing.h
new file mode 100644
index 0000000..b8ec6cb
--- /dev/null
+++ b/tokenizing.h
@@ -0,0 +1,9 @@
+#ifndef _TOKENIZING_H
+#define _TOKENIZING_H
+
+#include <stdio.h>
+#include <string.h>
+
+void tokenizing(void);
+
+#endif

commit 7edf57682091602acdbf0f65b9b1403150939296
Author: SebastianRubina <sebastian.rubina@icloud.com>
Date:   Tue Apr 5 20:05:32 2022 -0400

    TEST COMMIT

diff --git a/test.txt b/test.txt
new file mode 100644
index 0000000..e69de29

commit 6a2a7159e105cccadeccc46adbdfd586dfd57a93
Author: Peter Wan <97978729+peterdanwan@users.noreply.github.com>
Date:   Tue Apr 5 20:02:16 2022 -0400

    Create test

diff --git a/test b/test
new file mode 100644
index 0000000..309db29
--- /dev/null
+++ b/test
@@ -0,0 +1 @@
+Hi this is just a test.
